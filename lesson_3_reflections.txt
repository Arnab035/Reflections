When would you want to use a remote repository rather than keeping all your work local?

  A remote repo is helpful in that it can save all your data in case your local machine gets corrupted or all your data from 
your local machine is erased in the event of any failure. Any damage to your local machine does not mean the remote repo
stored remotely in some other computer gets damaged . That is one big advantage of creating a remote repo.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

 I am not sure, probably this gives us an option of keeping some changes in the remote repo invisible locally.  We can only pull those commits or branches which we want to work on locally.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

 Branch is like a commit made on a repository. Say A is a commit on a repository. We make some changes to it and another commit B is established. Now say there was a bug in A, so we need to checkout commit A again and resolve the bug to establish another commit C. This gives us A<-B and A<-C. B is a branch and again C is a branch.

 Clone is like copying the entire repository either from a remote machine to our local or copying an already existing repository in local to spawn a new repository again in our local machine. We will use cloning essentially to copy repositories from remote-> local or from local->local.

 Forking a repository means to copy a repository in a remote server like github to spawn a repository back again in the remote server. This applies for copying within the remote server itself.

What is the benefit of having a copy of the last known state of the remote stored locally?

 Having a local copy of the last known remote state helps to track changes made only in the remote and not made locally. If certain changes are made in the remote repository and committed, then it is very difficult to track the commit history locally, even though remotely we can see. That is a great benefit of having the last known state of the commit so we can track locally from which commit changes have been made to the remote repo. Can be helpful when commits go out-of-sync.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

 Emails probably or create a Google group/ Google hangouts session. But it would be difficult, wouldn't it. Especially for large projects, it would become a curse. When you work on large projects and the volume of code to work with becomes large, having a collaboration site like Github would be great. Because it makes sharing easy and tracking also.Share it over a server and collaborators can have access anytime and anywhere.

 Without Github, one thing would be easy. The communication between collaborators would be more transparent and faster. This would only involve smaller projects. But the communication levels are much better compared to a code-sharing site like github. 

 Many other factors are there but only listing these.



 