What happens when you initialize a repository? Why do you need to do it?

 When we initialize a repository, we indirectly enable version control on it. This is important to perform commits and track changes in the file.

How is the staging area different from the working directory and the repository? What value do you think it offers?

 The staging area cannot be physically seen like our working directory or repository. The staging area is like a virtual intermediary location in the git- version control system that temporarily houses our files for final commits. It allows us to think twice before commiting. By providing an intermediate location, we can, if we want, to reset the files back to the working directory so that we can make some more changes before making a final commit. So there is always a 2-point check for commit. That is quite good.

How can you use the staging area to make sure you have one commit per logical change?

 Every time, we make some changes to the files in the working directory and want to commit them, we can add the files to the staging directory. Then using git diff --staged, we can see differences between the file in staging and the most recent commit. Then if we are satisfied we can commit the files. This allows us to have only one commit per logical change.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

 Branches are helpful when we want to make some experimental changes and not sure whether the changes in question would work or not. If the changes in question work fine, we can introduce these to the master branch and commit them. This is also helpful if say we want the project to use a different language. We can branch out the same code but the comments may be described in Spanish !!!

 How do the diagrams help you visualize the branch structure?

  Makes it easier to view branches in the code history. By tracing out diagrams you can actually visualise the parent of a certain commit and know where actually the branches originated. 


 What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

  Merging adds up code from both branches and finally forms a single branch. This branch would include code and functionality from both the branches.
  To indicate that items from two branches have been combined and formed one branch, we indicate this data in the diagram in the fashion described.

 What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

  It saves time. Instead of looking manually through the entire code and then merging, removing conflicts, git does it automatically indicating all the conflicts to be seen in the code.
  The problem here is since everything is done automatically, sometimes it is highly likely git will not be able to determine conflicts. If in one branch we use a for loop, and in the other a while loop, running the same code inside the loops, it may again lead to conflicts that git might fail to detect.